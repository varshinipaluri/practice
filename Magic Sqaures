import java.util.* ;
import java.io.*; 

public class Solution {

	public static int countMagicSqaures(int[][] mat) {
		if(mat.length!=3 || mat[0].length!=3){
			return 0;
		}
		HashSet<Integer> ele=new HashSet<>();
		for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
				if(ele.contains(mat[i][j])){
					return 0;
				}
				ele.add(mat[i][j]);
			}
		}
		int rows[]=new int[3];
		int columns[]=new int[3];
		int d1=0,d2=0;
		for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
				rows[i]+=mat[i][j];
				columns[j]+=mat[i][j];
				if(i==j) d1+=mat[i][j];
				if((i+j)==2) d2+=mat[i][j];
			}
		}
		int refrencesum=rows[0];
		for(int i=0;i<3;i++){
			if(refrencesum!=rows[i]){
				return 0;
			}
		}
		for(int j=0;j<3;j++){
			if(refrencesum!=columns[j]){
				return 0;
			}
		}
		if(d1!=refrencesum || d2!=refrencesum){
			return 0;
		}
		return 1;
	}
	public static int countSqaures(int m, int n, int[][] mat) {
		// Write your code here.
		if(m<3 || n<3){
			return 0;
		}
		int count=0;
		for(int i=0;i<=m-3;i++){
			for(int j=0;j<=n-3;j++){
				int submat[][]=new int[3][3];
				for(int k=0;k<3;k++){
					System.arraycopy(mat[i+k],j,submat[k],0,3);
				}
				count+=countMagicSqaures(submat);
			}
		}
		return count;
	}

}
